#!/bin/sh
#. "$(dirname "$0")/_/husky.sh"

commit_msg=$(cat $1)

# Axion Release가 생성한 커밋 메시지는 검사하지 않음
if [[ "$commit_msg" == *"release:"* ]]; then
  exit 0
fi

npx --no -- commitlint --edit "$1"
RESULT=$?

# commitlint 검사 실패 시 커스텀 메시지 표시
if [ $RESULT -ne 0 ]; then
  echo ""
  echo "❌ Commit Message 포맷을 아래 예시와 같이 지켜주세요."
  echo " 사용가능한 commit의 Prefix는 아래와 같습니다."
  echo ""
  echo "======================= 반드시 콜론(:) 을 붙여야 합니다. ========================="
  echo ""
  echo "  feat:             새로운 기능을 추가"
  echo "  fix:              버그 수정"
  echo "  build:            빌드 관련 수정"
  echo "  chore:            그 외 기타 수정"
  echo "  docs:             문서나 주석 수정"
  echo "  style:            코드 스타일, 포맷팅 수정"
  echo "  refactor:         기능변화가 아닌 코드 리팩토링 ex) 변수 이름 변경"
  echo "  test:             테스트 코드 추가/수정"
  echo "  release:          버전 릴리즈"
  echo "  ci:               CI/CD 파이프라인, 스크립트 관련 변경"
  echo "  !BREAKING CHANGE: 커다란 API 변경의 경우"
  echo "  !HOTFIX:          급하게 치명적인 버그를 고쳐야하는 경우"
  echo ""
  echo "=================================================================================="
  echo ""
  echo -e " 아래 EXAMPLE과 같이 첫째 줄에 prefix와 함께 요약을 남기고 한 줄 개행 후 상세 내용을 작성해주세요. \n Merge Request 시 Overview에 자동으로 Title, Description 작성이 완료됩니다."
  echo ""
  echo "================================== E X A M P L E ================================="
  echo ""
  echo -e " git commit -m \"feat: 기능 A 추가\n\n  1. 000파일 추가 \n  2. 2222파일추가\n  3. 00 관련 비즈니스 로직 추가\""
  echo ""
  echo "=================================================================================="
  echo ""
  exit 1
fi

exit 0